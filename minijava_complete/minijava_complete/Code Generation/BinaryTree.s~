	.text
	.globl asm_main
asm_main:
	pushq %rbp
	movq %rsp,%rbp
	pushq %rdi
	movq %rdi,%rcx
	call BT$BT
	movq %rax,%rdi
	movq (%rdi),%rax
	lea 16(%rax),%rax
	call *(%rax)
	popq %rdi
	pushq %rdi
	movq %rax,%rdi
	call put
	popq %rdi
	movq %rbp,%rsp
	popq %rbp
	ret 

	.data
BinaryTree$$: .quad 0

BT$Start:
	pushq %rbp
	movq %rsp,%rbp
	subq $24,%rsp
	call Tree$Tree
	movq %rax,-8(%rbp)
	pushq %rdi
	movq %rdi,%rcx
	movq -8(%rbp),%rax
	movq %rax,%rdi
	movq $16,%rax
	pushq %rax
	movq (%rdi),%rax
	lea 16(%rax),%rax
	call *(%rax)
	popq %rdx
	popq %rdi
	movq %rax,-16(%rbp)
	pushq %rdi
	movq %rdi,%rcx
	movq -8(%rbp),%rax
	movq %rax,%rdi
	movq (%rdi),%rax
	lea 160(%rax),%rax
	call *(%rax)
	popq %rdi
	movq %rax,-16(%rbp)
	movq $100000000,%rax
	pushq %rdi
	movq %rax,%rdi
	call put
	popq %rdi
	pushq %rdi
	movq %rdi,%rcx
	movq -8(%rbp),%rax
	movq %rax,%rdi
	movq $8,%rax
	pushq %rax
	movq (%rdi),%rax
	lea 112(%rax),%rax
	call *(%rax)
	popq %rdx
	popq %rdi
	movq %rax,-16(%rbp)
	pushq %rdi
	movq %rdi,%rcx
	movq -8(%rbp),%rax
	movq %rax,%rdi
	movq (%rdi),%rax
	lea 160(%rax),%rax
	call *(%rax)
	popq %rdi
	movq %rax,-16(%rbp)
	pushq %rdi
	movq %rdi,%rcx
	movq -8(%rbp),%rax
	movq %rax,%rdi
	movq $24,%rax
	pushq %rax
	movq (%rdi),%rax
	lea 112(%rax),%rax
	call *(%rax)
	popq %rdx
	popq %rdi
	movq %rax,-16(%rbp)
	pushq %rdi
	movq %rdi,%rcx
	movq -8(%rbp),%rax
	movq %rax,%rdi
	movq $4,%rax
	pushq %rax
	movq (%rdi),%rax
	lea 112(%rax),%rax
	call *(%rax)
	popq %rdx
	popq %rdi
	movq %rax,-16(%rbp)
	pushq %rdi
	movq %rdi,%rcx
	movq -8(%rbp),%rax
	movq %rax,%rdi
	movq $12,%rax
	pushq %rax
	movq (%rdi),%rax
	lea 112(%rax),%rax
	call *(%rax)
	popq %rdx
	popq %rdi
	movq %rax,-16(%rbp)
	pushq %rdi
	movq %rdi,%rcx
	movq -8(%rbp),%rax
	movq %rax,%rdi
	movq $20,%rax
	pushq %rax
	movq (%rdi),%rax
	lea 112(%rax),%rax
	call *(%rax)
	popq %rdx
	popq %rdi
	movq %rax,-16(%rbp)
	pushq %rdi
	movq %rdi,%rcx
	movq -8(%rbp),%rax
	movq %rax,%rdi
	movq $28,%rax
	pushq %rax
	movq (%rdi),%rax
	lea 112(%rax),%rax
	call *(%rax)
	popq %rdx
	popq %rdi
	movq %rax,-16(%rbp)
	pushq %rdi
	movq %rdi,%rcx
	movq -8(%rbp),%rax
	movq %rax,%rdi
	movq $14,%rax
	pushq %rax
	movq (%rdi),%rax
	lea 112(%rax),%rax
	call *(%rax)
	popq %rdx
	popq %rdi
	movq %rax,-16(%rbp)
	pushq %rdi
	movq %rdi,%rcx
	movq -8(%rbp),%rax
	movq %rax,%rdi
	movq (%rdi),%rax
	lea 160(%rax),%rax
	call *(%rax)
	popq %rdi
	movq %rax,-16(%rbp)
	pushq %rdi
	movq %rdi,%rcx
	movq -8(%rbp),%rax
	movq %rax,%rdi
	movq $24,%rax
	pushq %rax
	movq (%rdi),%rax
	lea 152(%rax),%rax
	call *(%rax)
	popq %rdx
	popq %rdi
	pushq %rdi
	movq %rax,%rdi
	call put
	popq %rdi
	pushq %rdi
	movq %rdi,%rcx
	movq -8(%rbp),%rax
	movq %rax,%rdi
	movq $12,%rax
	pushq %rax
	movq (%rdi),%rax
	lea 152(%rax),%rax
	call *(%rax)
	popq %rdx
	popq %rdi
	pushq %rdi
	movq %rax,%rdi
	call put
	popq %rdi
	pushq %rdi
	movq %rdi,%rcx
	movq -8(%rbp),%rax
	movq %rax,%rdi
	movq $16,%rax
	pushq %rax
	movq (%rdi),%rax
	lea 152(%rax),%rax
	call *(%rax)
	popq %rdx
	popq %rdi
	pushq %rdi
	movq %rax,%rdi
	call put
	popq %rdi
	pushq %rdi
	movq %rdi,%rcx
	movq -8(%rbp),%rax
	movq %rax,%rdi
	movq $50,%rax
	pushq %rax
	movq (%rdi),%rax
	lea 152(%rax),%rax
	call *(%rax)
	popq %rdx
	popq %rdi
	pushq %rdi
	movq %rax,%rdi
	call put
	popq %rdi
	pushq %rdi
	movq %rdi,%rcx
	movq -8(%rbp),%rax
	movq %rax,%rdi
	movq $12,%rax
	pushq %rax
	movq (%rdi),%rax
	lea 152(%rax),%rax
	call *(%rax)
	popq %rdx
	popq %rdi
	pushq %rdi
	movq %rax,%rdi
	call put
	popq %rdi
	pushq %rdi
	movq %rdi,%rcx
	movq -8(%rbp),%rax
	movq %rax,%rdi
	movq $12,%rax
	pushq %rax
	movq (%rdi),%rax
	lea 120(%rax),%rax
	call *(%rax)
	popq %rdx
	popq %rdi
	movq %rax,-16(%rbp)
	pushq %rdi
	movq %rdi,%rcx
	movq -8(%rbp),%rax
	movq %rax,%rdi
	movq (%rdi),%rax
	lea 160(%rax),%rax
	call *(%rax)
	popq %rdi
	movq %rax,-16(%rbp)
	pushq %rdi
	movq %rdi,%rcx
	movq -8(%rbp),%rax
	movq %rax,%rdi
	movq $12,%rax
	pushq %rax
	movq (%rdi),%rax
	lea 152(%rax),%rax
	call *(%rax)
	popq %rdx
	popq %rdi
	pushq %rdi
	movq %rax,%rdi
	call put
	popq %rdi
	movq $0,%rax
	movq %rbp,%rsp
	popq %rbp
	ret 
BT$BT:
	pushq %rbp
	movq %rsp,%rbp
	pushq %rdi
	movq $8,%rdi
	call mjmalloc
	popq %rdi
	leaq BT$$,%rdx
	movq %rdx,(%rax)
	movq %rbp,%rsp
	popq %rbp
	ret 

	.data
BT$$: .quad 0
	.quad BT$BT
	.quad BT$Start

Tree$Init:
	pushq %rbp
	movq %rsp,%rbp
	movq 16(%rbp),%rax
	movq %rax,24(%rdi)
	movq $0,%rax
	movq %rax,32(%rdi)
	movq $0,%rax
	movq %rax,40(%rdi)
	movq $1,%rax
	movq %rbp,%rsp
	popq %rbp
	ret 
Tree$SetRight:
	pushq %rbp
	movq %rsp,%rbp
	movq 16(%rbp),%rax
	movq %rax,16(%rdi)
	movq $1,%rax
	movq %rbp,%rsp
	popq %rbp
	ret 
Tree$SetLeft:
	pushq %rbp
	movq %rsp,%rbp
	movq 16(%rbp),%rax
	movq %rax,8(%rdi)
	movq $1,%rax
	movq %rbp,%rsp
	popq %rbp
	ret 
Tree$GetRight:
	pushq %rbp
	movq %rsp,%rbp
	movq 16(%rdi),%rax
	movq %rbp,%rsp
	popq %rbp
	ret 
Tree$GetLeft:
	pushq %rbp
	movq %rsp,%rbp
	movq 8(%rdi),%rax
	movq %rbp,%rsp
	popq %rbp
	ret 
Tree$GetKey:
	pushq %rbp
	movq %rsp,%rbp
	movq 24(%rdi),%rax
	movq %rbp,%rsp
	popq %rbp
	ret 
Tree$SetKey:
	pushq %rbp
	movq %rsp,%rbp
	movq 16(%rbp),%rax
	movq %rax,24(%rdi)
	movq $1,%rax
	movq %rbp,%rsp
	popq %rbp
	ret 
Tree$GetHas_Right:
	pushq %rbp
	movq %rsp,%rbp
	movq 40(%rdi),%rax
	movq %rbp,%rsp
	popq %rbp
	ret 
Tree$GetHas_Left:
	pushq %rbp
	movq %rsp,%rbp
	movq 32(%rdi),%rax
	movq %rbp,%rsp
	popq %rbp
	ret 
Tree$SetHas_Left:
	pushq %rbp
	movq %rsp,%rbp
	movq 16(%rbp),%rax
	movq %rax,32(%rdi)
	movq $1,%rax
	movq %rbp,%rsp
	popq %rbp
	ret 
Tree$SetHas_Right:
	pushq %rbp
	movq %rsp,%rbp
	movq 16(%rbp),%rax
	movq %rax,40(%rdi)
	movq $1,%rax
	movq %rbp,%rsp
	popq %rbp
	ret 
Tree$Compare:
	pushq %rbp
	movq %rsp,%rbp
	subq $16,%rsp
	movq $0,%rax
	movq %rax,-8(%rbp)
	movq 16(%rbp),%rax
	pushq %rax
	movq $1,%rax
	popq %rdx
	addq %rdx,%rax
	movq %rax,-16(%rbp)
	movq 24(%rbp),%rax
	pushq %rax
	movq 16(%rbp),%rax
	popq %rdx
	cmpq %rax,%rdx
	jge else1
	movq $0,%rax
	movq %rax,-8(%rbp)
	jmp done1
else1:
	movq 24(%rbp),%rax
	pushq %rax
	movq -16(%rbp),%rax
	popq %rdx
	cmpq %rax,%rdx
	jl else2
	cmpq $0,%rax
	je else2
	movq $0,%rax
	movq %rax,-8(%rbp)
	jmp done2
else2:
	movq $1,%rax
	movq %rax,-8(%rbp)
done2:
done1:
	movq -8(%rbp),%rax
	movq %rbp,%rsp
	popq %rbp
	ret 
Tree$Insert:
	pushq %rbp
	movq %rsp,%rbp
	subq $40,%rsp
	call Tree$Tree
	movq %rax,-8(%rbp)
	pushq %rdi
	movq %rdi,%rcx
	movq -8(%rbp),%rax
	movq %rax,%rdi
	movq 16(%rbp),%rax
	pushq %rax
	movq (%rdi),%rax
	lea 16(%rax),%rax
	call *(%rax)
	popq %rdx
	popq %rdi
	movq %rax,-16(%rbp)
	movq %rdi,%rax
	movq %rax,-40(%rbp)
	movq $1,%rax
	movq %rax,-24(%rbp)
test1:
	movq -24(%rbp),%rax
	cmpq $0,%rax
	je done3
	pushq %rdi
	movq %rdi,%rcx
	movq -40(%rbp),%rax
	movq %rax,%rdi
	movq (%rdi),%rax
	lea 56(%rax),%rax
	call *(%rax)
	popq %rdi
	movq %rax,-32(%rbp)
	movq 16(%rbp),%rax
	pushq %rax
	movq -32(%rbp),%rax
	popq %rdx
	cmpq %rax,%rdx
	jge else3
	pushq %rdi
	movq %rdi,%rcx
	movq -40(%rbp),%rax
	movq %rax,%rdi
	movq (%rdi),%rax
	lea 80(%rax),%rax
	call *(%rax)
	popq %rdi
	cmpq $0,%rax
	je else4
	pushq %rdi
	movq %rdi,%rcx
	movq -40(%rbp),%rax
	movq %rax,%rdi
	movq (%rdi),%rax
	lea 48(%rax),%rax
	call *(%rax)
	popq %rdi
	movq %rax,-40(%rbp)
	jmp done5
else4:
	movq $0,%rax
	movq %rax,-24(%rbp)
	pushq %rdi
	movq %rdi,%rcx
	movq -40(%rbp),%rax
	movq %rax,%rdi
	movq $1,%rax
	pushq %rax
	movq (%rdi),%rax
	lea 88(%rax),%rax
	call *(%rax)
	popq %rdx
	popq %rdi
	movq %rax,-16(%rbp)
	pushq %rdi
	movq %rdi,%rcx
	movq -40(%rbp),%rax
	movq %rax,%rdi
	movq -8(%rbp),%rax
	pushq %rax
	movq (%rdi),%rax
	lea 32(%rax),%rax
	call *(%rax)
	popq %rdx
	popq %rdi
	movq %rax,-16(%rbp)
done5:
	jmp done4
else3:
	pushq %rdi
	movq %rdi,%rcx
	movq -40(%rbp),%rax
	movq %rax,%rdi
	movq (%rdi),%rax
	lea 72(%rax),%rax
	call *(%rax)
	popq %rdi
	cmpq $0,%rax
	je else5
	pushq %rdi
	movq %rdi,%rcx
	movq -40(%rbp),%rax
	movq %rax,%rdi
	movq (%rdi),%rax
	lea 40(%rax),%rax
	call *(%rax)
	popq %rdi
	movq %rax,-40(%rbp)
	jmp done6
else5:
	movq $0,%rax
	movq %rax,-24(%rbp)
	pushq %rdi
	movq %rdi,%rcx
	movq -40(%rbp),%rax
	movq %rax,%rdi
	movq $1,%rax
	pushq %rax
	movq (%rdi),%rax
	lea 96(%rax),%rax
	call *(%rax)
	popq %rdx
	popq %rdi
	movq %rax,-16(%rbp)
	pushq %rdi
	movq %rdi,%rcx
	movq -40(%rbp),%rax
	movq %rax,%rdi
	movq -8(%rbp),%rax
	pushq %rax
	movq (%rdi),%rax
	lea 24(%rax),%rax
	call *(%rax)
	popq %rdx
	popq %rdi
	movq %rax,-16(%rbp)
done6:
done4:
	jmp test1
done3:
	movq $1,%rax
	movq %rbp,%rsp
	popq %rbp
	ret 
Tree$Delete:
	pushq %rbp
	movq %rsp,%rbp
	subq $56,%rsp
	movq %rdi,%rax
	movq %rax,-8(%rbp)
	movq %rdi,%rax
	movq %rax,-16(%rbp)
	movq $1,%rax
	movq %rax,-24(%rbp)
	movq $0,%rax
	movq %rax,-32(%rbp)
	movq $1,%rax
	movq %rax,-40(%rbp)
test2:
	movq -24(%rbp),%rax
	cmpq $0,%rax
	je done7
	pushq %rdi
	movq %rdi,%rcx
	movq -8(%rbp),%rax
	movq %rax,%rdi
	movq (%rdi),%rax
	lea 56(%rax),%rax
	call *(%rax)
	popq %rdi
	movq %rax,-48(%rbp)
	movq 16(%rbp),%rax
	pushq %rax
	movq -48(%rbp),%rax
	popq %rdx
	cmpq %rax,%rdx
	jge else6
	pushq %rdi
	movq %rdi,%rcx
	movq -8(%rbp),%rax
	movq %rax,%rdi
	movq (%rdi),%rax
	lea 80(%rax),%rax
	call *(%rax)
	popq %rdi
	cmpq $0,%rax
	je else7
	movq -8(%rbp),%rax
	movq %rax,-16(%rbp)
	pushq %rdi
	movq %rdi,%rcx
	movq -8(%rbp),%rax
	movq %rax,%rdi
	movq (%rdi),%rax
	lea 48(%rax),%rax
	call *(%rax)
	popq %rdi
	movq %rax,-8(%rbp)
	jmp done9
else7:
	movq $0,%rax
	movq %rax,-24(%rbp)
done9:
	jmp done8
else6:
	movq -48(%rbp),%rax
	pushq %rax
	movq 16(%rbp),%rax
	popq %rdx
	cmpq %rax,%rdx
	jge else8
	pushq %rdi
	movq %rdi,%rcx
	movq -8(%rbp),%rax
	movq %rax,%rdi
	movq (%rdi),%rax
	lea 72(%rax),%rax
	call *(%rax)
	popq %rdi
	cmpq $0,%rax
	je else9
	movq -8(%rbp),%rax
	movq %rax,-16(%rbp)
	pushq %rdi
	movq %rdi,%rcx
	movq -8(%rbp),%rax
	movq %rax,%rdi
	movq (%rdi),%rax
	lea 40(%rax),%rax
	call *(%rax)
	popq %rdi
	movq %rax,-8(%rbp)
	jmp done11
else9:
	movq $0,%rax
	movq %rax,-24(%rbp)
done11:
	jmp done10
else8:
	movq -40(%rbp),%rax
	cmpq $0,%rax
	je else10
	pushq %rdi
	movq %rdi,%rcx
	movq -8(%rbp),%rax
	movq %rax,%rdi
	movq (%rdi),%rax
	lea 72(%rax),%rax
	call *(%rax)
	popq %rdi
	xor $1,%rax
	cmpq $0,%rax
	je else11
	pushq %rdi
	movq %rdi,%rcx
	movq -8(%rbp),%rax
	movq %rax,%rdi
	movq (%rdi),%rax
	lea 80(%rax),%rax
	call *(%rax)
	popq %rdi
	xor $1,%rax
	cmpq $0,%rax
	je else11
	movq $1,%rax
	movq %rax,-56(%rbp)
	jmp done13
else11:
	pushq %rdi
	movq %rdi,%rcx
	movq %rdi,%rax
	movq -16(%rbp),%rax
	pushq %rax
	movq -8(%rbp),%rax
	pushq %rax
	movq (%rdi),%rax
	lea 128(%rax),%rax
	call *(%rax)
	popq %rdx
	popq %rdx
	popq %rdi
	movq %rax,-56(%rbp)
done13:
	jmp done12
else10:
	pushq %rdi
	movq %rdi,%rcx
	movq %rdi,%rax
	movq -16(%rbp),%rax
	pushq %rax
	movq -8(%rbp),%rax
	pushq %rax
	movq (%rdi),%rax
	lea 128(%rax),%rax
	call *(%rax)
	popq %rdx
	popq %rdx
	popq %rdi
	movq %rax,-56(%rbp)
done12:
	movq $1,%rax
	movq %rax,-32(%rbp)
	movq $0,%rax
	movq %rax,-24(%rbp)
done10:
done8:
	movq $0,%rax
	movq %rax,-40(%rbp)
	jmp test2
done7:
	movq -32(%rbp),%rax
	movq %rbp,%rsp
	popq %rbp
	ret 
Tree$Remove:
	pushq %rbp
	movq %rsp,%rbp
	subq $24,%rsp
	pushq %rdi
	movq %rdi,%rcx
	movq 16(%rbp),%rax
	movq %rax,%rdi
	movq (%rdi),%rax
	lea 80(%rax),%rax
	call *(%rax)
	popq %rdi
	cmpq $0,%rax
	je else12
	pushq %rdi
	movq %rdi,%rcx
	movq %rdi,%rax
	movq 24(%rbp),%rax
	pushq %rax
	movq 16(%rbp),%rax
	pushq %rax
	movq (%rdi),%rax
	lea 144(%rax),%rax
	call *(%rax)
	popq %rdx
	popq %rdx
	popq %rdi
	movq %rax,-8(%rbp)
	jmp done14
else12:
	pushq %rdi
	movq %rdi,%rcx
	movq 16(%rbp),%rax
	movq %rax,%rdi
	movq (%rdi),%rax
	lea 72(%rax),%rax
	call *(%rax)
	popq %rdi
	cmpq $0,%rax
	je else13
	pushq %rdi
	movq %rdi,%rcx
	movq %rdi,%rax
	movq 24(%rbp),%rax
	pushq %rax
	movq 16(%rbp),%rax
	pushq %rax
	movq (%rdi),%rax
	lea 136(%rax),%rax
	call *(%rax)
	popq %rdx
	popq %rdx
	popq %rdi
	movq %rax,-8(%rbp)
	jmp done15
else13:
	pushq %rdi
	movq %rdi,%rcx
	movq 16(%rbp),%rax
	movq %rax,%rdi
	movq (%rdi),%rax
	lea 56(%rax),%rax
	call *(%rax)
	popq %rdi
	movq %rax,-16(%rbp)
	pushq %rdi
	movq %rdi,%rcx
	pushq %rdi
	movq %rdi,%rcx
	movq 24(%rbp),%rax
	movq %rax,%rdi
	movq (%rdi),%rax
	lea 48(%rax),%rax
	call *(%rax)
	popq %rdi
	movq %rax,%rdi
	movq (%rdi),%rax
	lea 56(%rax),%rax
	call *(%rax)
	popq %rdi
	movq %rax,-24(%rbp)
	pushq %rdi
	movq %rdi,%rcx
	movq %rdi,%rax
	movq -16(%rbp),%rax
	pushq %rax
	movq -24(%rbp),%rax
	pushq %rax
	movq (%rdi),%rax
	lea 104(%rax),%rax
	call *(%rax)
	popq %rdx
	popq %rdx
	popq %rdi
	cmpq $0,%rax
	je else14
	pushq %rdi
	movq %rdi,%rcx
	movq 24(%rbp),%rax
	movq %rax,%rdi
	movq 48(%rdi),%rax
	pushq %rax
	movq (%rdi),%rax
	lea 32(%rax),%rax
	call *(%rax)
	popq %rdx
	popq %rdi
	movq %rax,-8(%rbp)
	pushq %rdi
	movq %rdi,%rcx
	movq 24(%rbp),%rax
	movq %rax,%rdi
	movq $0,%rax
	pushq %rax
	movq (%rdi),%rax
	lea 88(%rax),%rax
	call *(%rax)
	popq %rdx
	popq %rdi
	movq %rax,-8(%rbp)
	jmp done16
else14:
	pushq %rdi
	movq %rdi,%rcx
	movq 24(%rbp),%rax
	movq %rax,%rdi
	movq 48(%rdi),%rax
	pushq %rax
	movq (%rdi),%rax
	lea 24(%rax),%rax
	call *(%rax)
	popq %rdx
	popq %rdi
	movq %rax,-8(%rbp)
	pushq %rdi
	movq %rdi,%rcx
	movq 24(%rbp),%rax
	movq %rax,%rdi
	movq $0,%rax
	pushq %rax
	movq (%rdi),%rax
	lea 96(%rax),%rax
	call *(%rax)
	popq %rdx
	popq %rdi
	movq %rax,-8(%rbp)
done16:
done15:
done14:
	movq $1,%rax
	movq %rbp,%rsp
	popq %rbp
	ret 
Tree$RemoveRight:
	pushq %rbp
	movq %rsp,%rbp
	subq $8,%rsp
test3:
	pushq %rdi
	movq %rdi,%rcx
	movq 16(%rbp),%rax
	movq %rax,%rdi
	movq (%rdi),%rax
	lea 72(%rax),%rax
	call *(%rax)
	popq %rdi
	cmpq $0,%rax
	je done17
	pushq %rdi
	movq %rdi,%rcx
	movq 16(%rbp),%rax
	movq %rax,%rdi
	pushq %rdi
	movq %rdi,%rcx
	pushq %rdi
	movq %rdi,%rcx
	movq 16(%rbp),%rax
	movq %rax,%rdi
	movq (%rdi),%rax
	lea 40(%rax),%rax
	call *(%rax)
	popq %rdi
	movq %rax,%rdi
	movq (%rdi),%rax
	lea 56(%rax),%rax
	call *(%rax)
	popq %rdi
	pushq %rax
	movq (%rdi),%rax
	lea 64(%rax),%rax
	call *(%rax)
	popq %rdx
	popq %rdi
	movq %rax,-8(%rbp)
	movq 16(%rbp),%rax
	movq %rax,24(%rbp)
	pushq %rdi
	movq %rdi,%rcx
	movq 16(%rbp),%rax
	movq %rax,%rdi
	movq (%rdi),%rax
	lea 40(%rax),%rax
	call *(%rax)
	popq %rdi
	movq %rax,16(%rbp)
	jmp test3
done17:
	pushq %rdi
	movq %rdi,%rcx
	movq 24(%rbp),%rax
	movq %rax,%rdi
	movq 48(%rdi),%rax
	pushq %rax
	movq (%rdi),%rax
	lea 24(%rax),%rax
	call *(%rax)
	popq %rdx
	popq %rdi
	movq %rax,-8(%rbp)
	pushq %rdi
	movq %rdi,%rcx
	movq 24(%rbp),%rax
	movq %rax,%rdi
	movq $0,%rax
	pushq %rax
	movq (%rdi),%rax
	lea 96(%rax),%rax
	call *(%rax)
	popq %rdx
	popq %rdi
	movq %rax,-8(%rbp)
	movq $1,%rax
	movq %rbp,%rsp
	popq %rbp
	ret 
Tree$RemoveLeft:
	pushq %rbp
	movq %rsp,%rbp
	subq $8,%rsp
test4:
	pushq %rdi
	movq %rdi,%rcx
	movq 16(%rbp),%rax
	movq %rax,%rdi
	movq (%rdi),%rax
	lea 80(%rax),%rax
	call *(%rax)
	popq %rdi
	cmpq $0,%rax
	je done18
	pushq %rdi
	movq %rdi,%rcx
	movq 16(%rbp),%rax
	movq %rax,%rdi
	pushq %rdi
	movq %rdi,%rcx
	pushq %rdi
	movq %rdi,%rcx
	movq 16(%rbp),%rax
	movq %rax,%rdi
	movq (%rdi),%rax
	lea 48(%rax),%rax
	call *(%rax)
	popq %rdi
	movq %rax,%rdi
	movq (%rdi),%rax
	lea 56(%rax),%rax
	call *(%rax)
	popq %rdi
	pushq %rax
	movq (%rdi),%rax
	lea 64(%rax),%rax
	call *(%rax)
	popq %rdx
	popq %rdi
	movq %rax,-8(%rbp)
	movq 16(%rbp),%rax
	movq %rax,24(%rbp)
	pushq %rdi
	movq %rdi,%rcx
	movq 16(%rbp),%rax
	movq %rax,%rdi
	movq (%rdi),%rax
	lea 48(%rax),%rax
	call *(%rax)
	popq %rdi
	movq %rax,16(%rbp)
	jmp test4
done18:
	pushq %rdi
	movq %rdi,%rcx
	movq 24(%rbp),%rax
	movq %rax,%rdi
	movq 48(%rdi),%rax
	pushq %rax
	movq (%rdi),%rax
	lea 32(%rax),%rax
	call *(%rax)
	popq %rdx
	popq %rdi
	movq %rax,-8(%rbp)
	pushq %rdi
	movq %rdi,%rcx
	movq 24(%rbp),%rax
	movq %rax,%rdi
	movq $0,%rax
	pushq %rax
	movq (%rdi),%rax
	lea 88(%rax),%rax
	call *(%rax)
	popq %rdx
	popq %rdi
	movq %rax,-8(%rbp)
	movq $1,%rax
	movq %rbp,%rsp
	popq %rbp
	ret 
Tree$Search:
	pushq %rbp
	movq %rsp,%rbp
	subq $32,%rsp
	movq %rdi,%rax
	movq %rax,-24(%rbp)
	movq $1,%rax
	movq %rax,-8(%rbp)
	movq $0,%rax
	movq %rax,-16(%rbp)
test5:
	movq -8(%rbp),%rax
	cmpq $0,%rax
	je done19
	pushq %rdi
	movq %rdi,%rcx
	movq -24(%rbp),%rax
	movq %rax,%rdi
	movq (%rdi),%rax
	lea 56(%rax),%rax
	call *(%rax)
	popq %rdi
	movq %rax,-32(%rbp)
	movq 16(%rbp),%rax
	pushq %rax
	movq -32(%rbp),%rax
	popq %rdx
	cmpq %rax,%rdx
	jge else15
	pushq %rdi
	movq %rdi,%rcx
	movq -24(%rbp),%rax
	movq %rax,%rdi
	movq (%rdi),%rax
	lea 80(%rax),%rax
	call *(%rax)
	popq %rdi
	cmpq $0,%rax
	je else16
	pushq %rdi
	movq %rdi,%rcx
	movq -24(%rbp),%rax
	movq %rax,%rdi
	movq (%rdi),%rax
	lea 48(%rax),%rax
	call *(%rax)
	popq %rdi
	movq %rax,-24(%rbp)
	jmp done21
else16:
	movq $0,%rax
	movq %rax,-8(%rbp)
done21:
	jmp done20
else15:
	movq -32(%rbp),%rax
	pushq %rax
	movq 16(%rbp),%rax
	popq %rdx
	cmpq %rax,%rdx
	jge else17
	pushq %rdi
	movq %rdi,%rcx
	movq -24(%rbp),%rax
	movq %rax,%rdi
	movq (%rdi),%rax
	lea 72(%rax),%rax
	call *(%rax)
	popq %rdi
	cmpq $0,%rax
	je else18
	pushq %rdi
	movq %rdi,%rcx
	movq -24(%rbp),%rax
	movq %rax,%rdi
	movq (%rdi),%rax
	lea 40(%rax),%rax
	call *(%rax)
	popq %rdi
	movq %rax,-24(%rbp)
	jmp done23
else18:
	movq $0,%rax
	movq %rax,-8(%rbp)
done23:
	jmp done22
else17:
	movq $1,%rax
	movq %rax,-16(%rbp)
	movq $0,%rax
	movq %rax,-8(%rbp)
done22:
done20:
	jmp test5
done19:
	movq -16(%rbp),%rax
	movq %rbp,%rsp
	popq %rbp
	ret 
Tree$Print:
	pushq %rbp
	movq %rsp,%rbp
	subq $16,%rsp
	movq %rdi,%rax
	movq %rax,-8(%rbp)
	pushq %rdi
	movq %rdi,%rcx
	movq %rdi,%rax
	movq -8(%rbp),%rax
	pushq %rax
	movq (%rdi),%rax
	lea 168(%rax),%rax
	call *(%rax)
	popq %rdx
	popq %rdi
	movq %rax,-16(%rbp)
	movq $1,%rax
	movq %rbp,%rsp
	popq %rbp
	ret 
Tree$RecPrint:
	pushq %rbp
	movq %rsp,%rbp
	subq $8,%rsp
	pushq %rdi
	movq %rdi,%rcx
	movq 16(%rbp),%rax
	movq %rax,%rdi
	movq (%rdi),%rax
	lea 80(%rax),%rax
	call *(%rax)
	popq %rdi
	cmpq $0,%rax
	je else19
	pushq %rdi
	movq %rdi,%rcx
	movq %rdi,%rax
	pushq %rdi
	movq %rdi,%rcx
	movq 16(%rbp),%rax
	movq %rax,%rdi
	movq (%rdi),%rax
	lea 48(%rax),%rax
	call *(%rax)
	popq %rdi
	pushq %rax
	movq (%rdi),%rax
	lea 168(%rax),%rax
	call *(%rax)
	popq %rdx
	popq %rdi
	movq %rax,-8(%rbp)
	jmp done24
else19:
	movq $1,%rax
	movq %rax,-8(%rbp)
done24:
	pushq %rdi
	movq %rdi,%rcx
	movq 16(%rbp),%rax
	movq %rax,%rdi
	movq (%rdi),%rax
	lea 56(%rax),%rax
	call *(%rax)
	popq %rdi
	pushq %rdi
	movq %rax,%rdi
	call put
	popq %rdi
	pushq %rdi
	movq %rdi,%rcx
	movq 16(%rbp),%rax
	movq %rax,%rdi
	movq (%rdi),%rax
	lea 72(%rax),%rax
	call *(%rax)
	popq %rdi
	cmpq $0,%rax
	je else20
	pushq %rdi
	movq %rdi,%rcx
	movq %rdi,%rax
	pushq %rdi
	movq %rdi,%rcx
	movq 16(%rbp),%rax
	movq %rax,%rdi
	movq (%rdi),%rax
	lea 40(%rax),%rax
	call *(%rax)
	popq %rdi
	pushq %rax
	movq (%rdi),%rax
	lea 168(%rax),%rax
	call *(%rax)
	popq %rdx
	popq %rdi
	movq %rax,-8(%rbp)
	jmp done25
else20:
	movq $1,%rax
	movq %rax,-8(%rbp)
done25:
	movq $1,%rax
	movq %rbp,%rsp
	popq %rbp
	ret 
Tree$Tree:
	pushq %rbp
	movq %rsp,%rbp
	pushq %rdi
	movq $56,%rdi
	call mjmalloc
	popq %rdi
	leaq Tree$$,%rdx
	movq %rdx,(%rax)
	movq $0,8(%rax)
	movq $0,16(%rax)
	movq $0,24(%rax)
	movq $0,32(%rax)
	movq $0,40(%rax)
	movq $0,48(%rax)
	movq %rbp,%rsp
	popq %rbp
	ret 

	.data
Tree$$: .quad 0
	.quad Tree$Tree
	.quad Tree$Init
	.quad Tree$SetRight
	.quad Tree$SetLeft
	.quad Tree$GetRight
	.quad Tree$GetLeft
	.quad Tree$GetKey
	.quad Tree$SetKey
	.quad Tree$GetHas_Right
	.quad Tree$GetHas_Left
	.quad Tree$SetHas_Left
	.quad Tree$SetHas_Right
	.quad Tree$Compare
	.quad Tree$Insert
	.quad Tree$Delete
	.quad Tree$Remove
	.quad Tree$RemoveRight
	.quad Tree$RemoveLeft
	.quad Tree$Search
	.quad Tree$Print
	.quad Tree$RecPrint


