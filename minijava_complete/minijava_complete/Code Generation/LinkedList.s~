text
	.globl asm_main
asm_main:
	pushq %rbp
	movq %rsp,%rbp
	pushq %rdi
	movq %rdi,%rcx
	call LL$LL
	movq %rax,%rdi
	movq (%rdi),%rax
	lea 16(%rax),%rax
	call *(%rax)
	popq %rdi
	pushq %rdi
	movq %rax,%rdi
	call put
	popq %rdi
	movq %rbp,%rsp
	popq %rbp
	ret 

	.data
LinkedList$$: .quad 0

Element$Init:
	pushq %rbp
	movq %rsp,%rbp
	movq 32(%rbp),%rax
	movq %rax,8(%rdi)
	movq 24(%rbp),%rax
	movq %rax,16(%rdi)
	movq 16(%rbp),%rax
	movq %rax,24(%rdi)
	movq $1,%rax
	movq %rbp,%rsp
	popq %rbp
	ret 
Element$GetAge:
	pushq %rbp
	movq %rsp,%rbp
	movq 8(%rdi),%rax
	movq %rbp,%rsp
	popq %rbp
	ret 
Element$GetSalary:
	pushq %rbp
	movq %rsp,%rbp
	movq 16(%rdi),%rax
	movq %rbp,%rsp
	popq %rbp
	ret 
Element$GetMarried:
	pushq %rbp
	movq %rsp,%rbp
	movq 24(%rdi),%rax
	movq %rbp,%rsp
	popq %rbp
	ret 
Element$Equal:
	pushq %rbp
	movq %rsp,%rbp
	subq $32,%rsp
	movq $1,%rax
	movq %rax,-8(%rbp)
	pushq %rdi
	movq %rdi,%rcx
	movq 16(%rbp),%rax
	movq %rax,%rdi
	movq (%rdi),%rax
	lea 24(%rax),%rax
	call *(%rax)
	popq %rdi
	movq %rax,-16(%rbp)
	pushq %rdi
	movq %rdi,%rcx
	movq %rdi,%rax
	movq -16(%rbp),%rax
	pushq %rax
	movq 8(%rdi),%rax
	pushq %rax
	movq (%rdi),%rax
	lea 56(%rax),%rax
	call *(%rax)
	popq %rdx
	popq %rdx
	popq %rdi
	xor $1,%rax
	cmpq $0,%rax
	je else1
	movq $0,%rax
	movq %rax,-8(%rbp)
	jmp done1
else1:
	pushq %rdi
	movq %rdi,%rcx
	movq 16(%rbp),%rax
	movq %rax,%rdi
	movq (%rdi),%rax
	lea 32(%rax),%rax
	call *(%rax)
	popq %rdi
	movq %rax,-24(%rbp)
	pushq %rdi
	movq %rdi,%rcx
	movq %rdi,%rax
	movq -24(%rbp),%rax
	pushq %rax
	movq 16(%rdi),%rax
	pushq %rax
	movq (%rdi),%rax
	lea 56(%rax),%rax
	call *(%rax)
	popq %rdx
	popq %rdx
	popq %rdi
	xor $1,%rax
	cmpq $0,%rax
	je else2
	movq $0,%rax
	movq %rax,-8(%rbp)
	jmp done2
else2:
	movq 24(%rdi),%rax
	cmpq $0,%rax
	je else3
	pushq %rdi
	movq %rdi,%rcx
	movq 16(%rbp),%rax
	movq %rax,%rdi
	movq (%rdi),%rax
	lea 40(%rax),%rax
	call *(%rax)
	popq %rdi
	xor $1,%rax
	cmpq $0,%rax
	je else4
	movq $0,%rax
	movq %rax,-8(%rbp)
	jmp done4
else4:
	movq $0,%rax
	movq %rax,-32(%rbp)
done4:
	jmp done3
else3:
	pushq %rdi
	movq %rdi,%rcx
	movq 16(%rbp),%rax
	movq %rax,%rdi
	movq (%rdi),%rax
	lea 40(%rax),%rax
	call *(%rax)
	popq %rdi
	cmpq $0,%rax
	je else5
	movq $0,%rax
	movq %rax,-8(%rbp)
	jmp done5
else5:
	movq $0,%rax
	movq %rax,-32(%rbp)
done5:
done3:
done2:
done1:
	movq -8(%rbp),%rax
	movq %rbp,%rsp
	popq %rbp
	ret 
Element$Compare:
	pushq %rbp
	movq %rsp,%rbp
	subq $16,%rsp
	movq $0,%rax
	movq %rax,-8(%rbp)
	movq 16(%rbp),%rax
	pushq %rax
	movq $1,%rax
	popq %rdx
	addq %rdx,%rax
	movq %rax,-16(%rbp)
	movq 24(%rbp),%rax
	pushq %rax
	movq 16(%rbp),%rax
	popq %rdx
	cmpq %rax,%rdx
	jge else6
	movq $0,%rax
	movq %rax,-8(%rbp)
	jmp done6
else6:
	movq 24(%rbp),%rax
	pushq %rax
	movq -16(%rbp),%rax
	popq %rdx
	cmpq %rax,%rdx
	jl else7
	cmpq $0,%rax
	je else7
	movq $0,%rax
	movq %rax,-8(%rbp)
	jmp done7
else7:
	movq $1,%rax
	movq %rax,-8(%rbp)
done7:
done6:
	movq -8(%rbp),%rax
	movq %rbp,%rsp
	popq %rbp
	ret 
Element$Element:
	pushq %rbp
	movq %rsp,%rbp
	pushq %rdi
	movq $32,%rdi
	call mjmalloc
	popq %rdi
	leaq Element$$,%rdx
	movq %rdx,(%rax)
	movq $0,8(%rax)
	movq $0,16(%rax)
	movq $0,24(%rax)
	movq %rbp,%rsp
	popq %rbp
	ret 

	.data
Element$$: .quad 0
	.quad Element$Element
	.quad Element$Init
	.quad Element$GetAge
	.quad Element$GetSalary
	.quad Element$GetMarried
	.quad Element$Equal
	.quad Element$Compare

List$Init:
	pushq %rbp
	movq %rsp,%rbp
	movq $1,%rax
	movq %rax,24(%rdi)
	movq $1,%rax
	movq %rbp,%rsp
	popq %rbp
	ret 
List$InitNew:
	pushq %rbp
	movq %rsp,%rbp
	movq 16(%rbp),%rax
	movq %rax,24(%rdi)
	movq 32(%rbp),%rax
	movq %rax,8(%rdi)
	movq 24(%rbp),%rax
	movq %rax,16(%rdi)
	movq $1,%rax
	movq %rbp,%rsp
	popq %rbp
	ret 
List$Insert:
	pushq %rbp
	movq %rsp,%rbp
	subq $24,%rsp
	movq %rdi,%rax
	movq %rax,-16(%rbp)
	pushq %rax
	call List$List
	popq %rdx
	movq %rax,-24(%rbp)
	pushq %rdi
	movq %rdi,%rcx
	movq -24(%rbp),%rax
	movq %rax,%rdi
	movq 16(%rbp),%rax
	pushq %rax
	movq -16(%rbp),%rax
	pushq %rax
	movq $0,%rax
	pushq %rax
	movq (%rdi),%rax
	lea 24(%rax),%rax
	call *(%rax)
	popq %rdx
	popq %rdx
	popq %rdx
	popq %rdi
	movq %rax,-8(%rbp)
	movq -24(%rbp),%rax
	movq %rbp,%rsp
	popq %rbp
	ret 
List$SetNext:
	pushq %rbp
	movq %rsp,%rbp
	movq 16(%rbp),%rax
	movq %rax,16(%rdi)
	movq $1,%rax
	movq %rbp,%rsp
	popq %rbp
	ret 
List$Delete:
	pushq %rbp
	movq %rsp,%rbp
	subq $72,%rsp
	movq %rdi,%rax
	movq %rax,-8(%rbp)
	movq $0,%rax
	movq %rax,-16(%rbp)
	movq $0,%rax
	pushq %rax
	movq $1,%rax
	popq %rdx
	negq %rax
	addq %rdx,%rax
	movq %rax,-64(%rbp)
	movq %rdi,%rax
	movq %rax,-32(%rbp)
	movq %rdi,%rax
	movq %rax,-40(%rbp)
	movq 24(%rdi),%rax
	movq %rax,-48(%rbp)
	movq 8(%rdi),%rax
	movq %rax,-56(%rbp)
test1:
	movq -48(%rbp),%rax
	xor $1,%rax
	cmpq $0,%rax
	je done8
	movq -16(%rbp),%rax
	xor $1,%rax
	cmpq $0,%rax
	je done8
	pushq %rdi
	movq %rdi,%rcx
	movq 16(%rbp),%rax
	movq %rax,%rdi
	movq -56(%rbp),%rax
	pushq %rax
	movq (%rdi),%rax
	lea 48(%rax),%rax
	call *(%rax)
	popq %rdx
	popq %rdi
	cmpq $0,%rax
	je else8
	movq $1,%rax
	movq %rax,-16(%rbp)
	movq -64(%rbp),%rax
	pushq %rax
	movq $0,%rax
	popq %rdx
	cmpq %rax,%rdx
	jge else9
	pushq %rdi
	movq %rdi,%rcx
	movq -32(%rbp),%rax
	movq %rax,%rdi
	movq (%rdi),%rax
	lea 80(%rax),%rax
	call *(%rax)
	popq %rdi
	movq %rax,-8(%rbp)
	jmp done10
else9:
	movq $0,%rax
	pushq %rax
	movq $555,%rax
	popq %rdx
	negq %rax
	addq %rdx,%rax
	pushq %rdi
	movq %rax,%rdi
	call put
	popq %rdi
	pushq %rdi
	movq %rdi,%rcx
	movq -40(%rbp),%rax
	movq %rax,%rdi
	pushq %rdi
	movq %rdi,%rcx
	movq -32(%rbp),%rax
	movq %rax,%rdi
	pushq %rax
	movq (%rdi),%rax
	lea 80(%rax),%rax
	call *(%rax)
	popq %rdx
	popq %rdi
	pushq %rax
	movq (%rdi),%rax
	lea 40(%rax),%rax
	call *(%rax)
	popq %rdx
	popq %rdi
	movq %rax,-24(%rbp)
	movq $0,%rax
	pushq %rax
	movq $555,%rax
	popq %rdx
	negq %rax
	addq %rdx,%rax
	pushq %rdi
	movq %rax,%rdi
	call put
	popq %rdi
done10:
	jmp done9
else8:
	movq $0,%rax
	movq %rax,-72(%rbp)
done9:
	movq -16(%rbp),%rax
	xor $1,%rax
	cmpq $0,%rax
	je else10
	movq -32(%rbp),%rax
	movq %rax,-40(%rbp)
	pushq %rdi
	movq %rdi,%rcx
	movq -32(%rbp),%rax
	movq %rax,%rdi
	movq (%rdi),%rax
	lea 80(%rax),%rax
	call *(%rax)
	popq %rdi
	movq %rax,-32(%rbp)
	pushq %rdi
	movq %rdi,%rcx
	movq -32(%rbp),%rax
	movq %rax,%rdi
	movq (%rdi),%rax
	lea 64(%rax),%rax
	call *(%rax)
	popq %rdi
	movq %rax,-48(%rbp)
	pushq %rdi
	movq %rdi,%rcx
	movq -32(%rbp),%rax
	movq %rax,%rdi
	movq (%rdi),%rax
	lea 72(%rax),%rax
	call *(%rax)
	popq %rdi
	movq %rax,-56(%rbp)
	movq $1,%rax
	movq %rax,-64(%rbp)
	jmp done11
else10:
	movq $0,%rax
	movq %rax,-72(%rbp)
done11:
	jmp test1
done8:
	movq -8(%rbp),%rax
	movq %rbp,%rsp
	popq %rbp
	ret 
List$Search:
	pushq %rbp
	movq %rsp,%rbp
	subq $40,%rsp
	movq $0,%rax
	movq %rax,-8(%rbp)
	movq %rdi,%rax
	movq %rax,-16(%rbp)
	movq 24(%rdi),%rax
	movq %rax,-32(%rbp)
	movq 8(%rdi),%rax
	movq %rax,-24(%rbp)
test2:
	movq -32(%rbp),%rax
	xor $1,%rax
	cmpq $0,%rax
	je done12
	pushq %rdi
	movq %rdi,%rcx
	movq 16(%rbp),%rax
	movq %rax,%rdi
	movq -24(%rbp),%rax
	pushq %rax
	movq (%rdi),%rax
	lea 48(%rax),%rax
	call *(%rax)
	popq %rdx
	popq %rdi
	cmpq $0,%rax
	je else11
	movq $1,%rax
	movq %rax,-8(%rbp)
	jmp done13
else11:
	movq $0,%rax
	movq %rax,-40(%rbp)
done13:
	pushq %rdi
	movq %rdi,%rcx
	movq -16(%rbp),%rax
	movq %rax,%rdi
	movq (%rdi),%rax
	lea 80(%rax),%rax
	call *(%rax)
	popq %rdi
	movq %rax,-16(%rbp)
	pushq %rdi
	movq %rdi,%rcx
	movq -16(%rbp),%rax
	movq %rax,%rdi
	movq (%rdi),%rax
	lea 64(%rax),%rax
	call *(%rax)
	popq %rdi
	movq %rax,-32(%rbp)
	pushq %rdi
	movq %rdi,%rcx
	movq -16(%rbp),%rax
	movq %rax,%rdi
	movq (%rdi),%rax
	lea 72(%rax),%rax
	call *(%rax)
	popq %rdi
	movq %rax,-24(%rbp)
	jmp test2
done12:
	movq -8(%rbp),%rax
	movq %rbp,%rsp
	popq %rbp
	ret 
List$GetEnd:
	pushq %rbp
	movq %rsp,%rbp
	movq 24(%rdi),%rax
	movq %rbp,%rsp
	popq %rbp
	ret 
List$GetElem:
	pushq %rbp
	movq %rsp,%rbp
	movq 8(%rdi),%rax
	movq %rbp,%rsp
	popq %rbp
	ret 
List$GetNext:
	pushq %rbp
	movq %rsp,%rbp
	movq 16(%rdi),%rax
	movq %rbp,%rsp
	popq %rbp
	ret 
List$Print:
	pushq %rbp
	movq %rsp,%rbp
	subq $24,%rsp
	movq %rdi,%rax
	movq %rax,-8(%rbp)
	movq 24(%rdi),%rax
	movq %rax,-16(%rbp)
	movq 8(%rdi),%rax
	movq %rax,-24(%rbp)
test3:
	movq -16(%rbp),%rax
	xor $1,%rax
	cmpq $0,%rax
	je done14
	pushq %rdi
	movq %rdi,%rcx
	movq -24(%rbp),%rax
	movq %rax,%rdi
	movq (%rdi),%rax
	lea 24(%rax),%rax
	call *(%rax)
	popq %rdi
	pushq %rdi
	movq %rax,%rdi
	call put
	popq %rdi
	pushq %rdi
	movq %rdi,%rcx
	movq -8(%rbp),%rax
	movq %rax,%rdi
	movq (%rdi),%rax
	lea 80(%rax),%rax
	call *(%rax)
	popq %rdi
	movq %rax,-8(%rbp)
	pushq %rdi
	movq %rdi,%rcx
	movq -8(%rbp),%rax
	movq %rax,%rdi
	movq (%rdi),%rax
	lea 64(%rax),%rax
	call *(%rax)
	popq %rdi
	movq %rax,-16(%rbp)
	pushq %rdi
	movq %rdi,%rcx
	movq -8(%rbp),%rax
	movq %rax,%rdi
	movq (%rdi),%rax
	lea 72(%rax),%rax
	call *(%rax)
	popq %rdi
	movq %rax,-24(%rbp)
	jmp test3
done14:
	movq $1,%rax
	movq %rbp,%rsp
	popq %rbp
	ret 
List$List:
	pushq %rbp
	movq %rsp,%rbp
	pushq %rdi
	movq $32,%rdi
	call mjmalloc
	popq %rdi
	leaq List$$,%rdx
	movq %rdx,(%rax)
	movq $0,8(%rax)
	movq $0,16(%rax)
	movq $0,24(%rax)
	movq %rbp,%rsp
	popq %rbp
	ret 

	.data
List$$: .quad 0
	.quad List$List
	.quad List$Init
	.quad List$InitNew
	.quad List$Insert
	.quad List$SetNext
	.quad List$Delete
	.quad List$Search
	.quad List$GetEnd
	.quad List$GetElem
	.quad List$GetNext
	.quad List$Print

LL$Start:
	pushq %rbp
	movq %rsp,%rbp
	subq $48,%rsp
	pushq %rax
	call List$List
	popq %rdx
	movq %rax,-16(%rbp)
	pushq %rdi
	movq %rdi,%rcx
	movq -16(%rbp),%rax
	movq %rax,%rdi
	movq (%rdi),%rax
	lea 16(%rax),%rax
	call *(%rax)
	popq %rdi
	movq %rax,-24(%rbp)
	movq -16(%rbp),%rax
	movq %rax,-8(%rbp)
	pushq %rdi
	movq %rdi,%rcx
	movq -8(%rbp),%rax
	movq %rax,%rdi
	movq (%rdi),%rax
	lea 16(%rax),%rax
	call *(%rax)
	popq %rdi
	movq %rax,-24(%rbp)
	pushq %rdi
	movq %rdi,%rcx
	movq -8(%rbp),%rax
	movq %rax,%rdi
	movq (%rdi),%rax
	lea 88(%rax),%rax
	call *(%rax)
	popq %rdi
	movq %rax,-24(%rbp)
	pushq %rax
	call Element$Element
	popq %rdx
	movq %rax,-32(%rbp)
	pushq %rdi
	movq %rdi,%rcx
	movq -32(%rbp),%rax
	movq %rax,%rdi
	movq $25,%rax
	pushq %rax
	movq $37000,%rax
	pushq %rax
	movq $0,%rax
	pushq %rax
	movq (%rdi),%rax
	lea 16(%rax),%rax
	call *(%rax)
	popq %rdx
	popq %rdx
	popq %rdx
	popq %rdi
	movq %rax,-24(%rbp)
	pushq %rdi
	movq %rdi,%rcx
	movq -8(%rbp),%rax
	movq %rax,%rdi
	movq -32(%rbp),%rax
	pushq %rax
	movq (%rdi),%rax
	lea 32(%rax),%rax
	call *(%rax)
	popq %rdx
	popq %rdi
	movq %rax,-8(%rbp)
	pushq %rdi
	movq %rdi,%rcx
	movq -8(%rbp),%rax
	movq %rax,%rdi
	movq (%rdi),%rax
	lea 88(%rax),%rax
	call *(%rax)
	popq %rdi
	movq %rax,-24(%rbp)
	movq $10000000,%rax
	pushq %rdi
	movq %rax,%rdi
	call put
	popq %rdi
	pushq %rax
	call Element$Element
	popq %rdx
	movq %rax,-32(%rbp)
	pushq %rdi
	movq %rdi,%rcx
	movq -32(%rbp),%rax
	movq %rax,%rdi
	movq $39,%rax
	pushq %rax
	movq $42000,%rax
	pushq %rax
	movq $1,%rax
	pushq %rax
	movq (%rdi),%rax
	lea 16(%rax),%rax
	call *(%rax)
	popq %rdx
	popq %rdx
	popq %rdx
	popq %rdi
	movq %rax,-24(%rbp)
	movq -32(%rbp),%rax
	movq %rax,-40(%rbp)
	pushq %rdi
	movq %rdi,%rcx
	movq -8(%rbp),%rax
	movq %rax,%rdi
	movq -32(%rbp),%rax
	pushq %rax
	movq (%rdi),%rax
	lea 32(%rax),%rax
	call *(%rax)
	popq %rdx
	popq %rdi
	movq %rax,-8(%rbp)
	pushq %rdi
	movq %rdi,%rcx
	movq -8(%rbp),%rax
	movq %rax,%rdi
	movq (%rdi),%rax
	lea 88(%rax),%rax
	call *(%rax)
	popq %rdi
	movq %rax,-24(%rbp)
	movq $10000000,%rax
	pushq %rdi
	movq %rax,%rdi
	call put
	popq %rdi
	pushq %rax
	call Element$Element
	popq %rdx
	movq %rax,-32(%rbp)
	pushq %rdi
	movq %rdi,%rcx
	movq -32(%rbp),%rax
	movq %rax,%rdi
	movq $22,%rax
	pushq %rax
	movq $34000,%rax
	pushq %rax
	movq $0,%rax
	pushq %rax
	movq (%rdi),%rax
	lea 16(%rax),%rax
	call *(%rax)
	popq %rdx
	popq %rdx
	popq %rdx
	popq %rdi
	movq %rax,-24(%rbp)
	pushq %rdi
	movq %rdi,%rcx
	movq -8(%rbp),%rax
	movq %rax,%rdi
	movq -32(%rbp),%rax
	pushq %rax
	movq (%rdi),%rax
	lea 32(%rax),%rax
	call *(%rax)
	popq %rdx
	popq %rdi
	movq %rax,-8(%rbp)
	pushq %rdi
	movq %rdi,%rcx
	movq -8(%rbp),%rax
	movq %rax,%rdi
	movq (%rdi),%rax
	lea 88(%rax),%rax
	call *(%rax)
	popq %rdi
	movq %rax,-24(%rbp)
	pushq %rax
	call Element$Element
	popq %rdx
	movq %rax,-48(%rbp)
	pushq %rdi
	movq %rdi,%rcx
	movq -48(%rbp),%rax
	movq %rax,%rdi
	movq $27,%rax
	pushq %rax
	movq $34000,%rax
	pushq %rax
	movq $0,%rax
	pushq %rax
	movq (%rdi),%rax
	lea 16(%rax),%rax
	call *(%rax)
	popq %rdx
	popq %rdx
	popq %rdx
	popq %rdi
	movq %rax,-24(%rbp)
	pushq %rdi
	movq %rdi,%rcx
	movq -8(%rbp),%rax
	movq %rax,%rdi
	movq -40(%rbp),%rax
	pushq %rax
	movq (%rdi),%rax
	lea 56(%rax),%rax
	call *(%rax)
	popq %rdx
	popq %rdi
	pushq %rdi
	movq %rax,%rdi
	call put
	popq %rdi
	pushq %rdi
	movq %rdi,%rcx
	movq -8(%rbp),%rax
	movq %rax,%rdi
	movq -48(%rbp),%rax
	pushq %rax
	movq (%rdi),%rax
	lea 56(%rax),%rax
	call *(%rax)
	popq %rdx
	popq %rdi
	pushq %rdi
	movq %rax,%rdi
	call put
	popq %rdi
	movq $10000000,%rax
	pushq %rdi
	movq %rax,%rdi
	call put
	popq %rdi
	pushq %rax
	call Element$Element
	popq %rdx
	movq %rax,-32(%rbp)
	pushq %rdi
	movq %rdi,%rcx
	movq -32(%rbp),%rax
	movq %rax,%rdi
	movq $28,%rax
	pushq %rax
	movq $35000,%rax
	pushq %rax
	movq $0,%rax
	pushq %rax
	movq (%rdi),%rax
	lea 16(%rax),%rax
	call *(%rax)
	popq %rdx
	popq %rdx
	popq %rdx
	popq %rdi
	movq %rax,-24(%rbp)
	pushq %rdi
	movq %rdi,%rcx
	movq -8(%rbp),%rax
	movq %rax,%rdi
	movq -32(%rbp),%rax
	pushq %rax
	movq (%rdi),%rax
	lea 32(%rax),%rax
	call *(%rax)
	popq %rdx
	popq %rdi
	movq %rax,-8(%rbp)
	pushq %rdi
	movq %rdi,%rcx
	movq -8(%rbp),%rax
	movq %rax,%rdi
	movq (%rdi),%rax
	lea 88(%rax),%rax
	call *(%rax)
	popq %rdi
	movq %rax,-24(%rbp)
	movq $2220000,%rax
	pushq %rdi
	movq %rax,%rdi
	call put
	popq %rdi
	pushq %rdi
	movq %rdi,%rcx
	movq -8(%rbp),%rax
	movq %rax,%rdi
	movq -40(%rbp),%rax
	pushq %rax
	movq (%rdi),%rax
	lea 48(%rax),%rax
	call *(%rax)
	popq %rdx
	popq %rdi
	movq %rax,-8(%rbp)
	pushq %rdi
	movq %rdi,%rcx
	movq -8(%rbp),%rax
	movq %rax,%rdi
	movq (%rdi),%rax
	lea 88(%rax),%rax
	call *(%rax)
	popq %rdi
	movq %rax,-24(%rbp)
	movq $33300000,%rax
	pushq %rdi
	movq %rax,%rdi
	call put
	popq %rdi
	pushq %rdi
	movq %rdi,%rcx
	movq -8(%rbp),%rax
	movq %rax,%rdi
	movq -32(%rbp),%rax
	pushq %rax
	movq (%rdi),%rax
	lea 48(%rax),%rax
	call *(%rax)
	popq %rdx
	popq %rdi
	movq %rax,-8(%rbp)
	pushq %rdi
	movq %rdi,%rcx
	movq -8(%rbp),%rax
	movq %rax,%rdi
	movq (%rdi),%rax
	lea 88(%rax),%rax
	call *(%rax)
	popq %rdi
	movq %rax,-24(%rbp)
	movq $44440000,%rax
	pushq %rdi
	movq %rax,%rdi
	call put
	popq %rdi
	movq $0,%rax
	movq %rbp,%rsp
	popq %rbp
	ret 
LL$LL:
	pushq %rbp
	movq %rsp,%rbp
	pushq %rdi
	movq $8,%rdi
	call mjmalloc
	popq %rdi
	leaq LL$$,%rdx
	movq %rdx,(%rax)
	movq %rbp,%rsp
	popq %rbp
	ret 

	.data
LL$$: .quad 0
	.quad LL$LL
	.quad LL$Start
