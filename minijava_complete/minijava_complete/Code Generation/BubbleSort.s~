	.text
	.globl asm_main
asm_main:
	pushq %rbp
	movq %rsp,%rbp
	pushq %rdi
	call BBS$BBS
	movq %rax,%rdi
	movq $10,%rax
	pushq %rax
	movq (%rdi),%rax
	lea 16(%rax),%rax
	call *(%rax)
	popq %rdx
	popq %rdi
	pushq %rdi
	movq %rax,%rdi
	call put
	popq %rdi
	movq %rbp,%rsp
	popq %rbp
	ret 

	.data
BubbleSort$$: .quad 0

BBS$Start:
	pushq %rbp
	movq %rsp,%rbp
	subq $8,%rsp
	pushq %rdi
	movq %rdi,%rax
	movq 16(%rbp),%rax
	pushq %rax
	movq (%rdi),%rax
	lea 40(%rax),%rax
	call *(%rax)
	popq %rdx
	popq %rdi
	movq %rax,-8(%rbp)
	pushq %rdi
	movq %rdi,%rax
	movq (%rdi),%rax
	lea 32(%rax),%rax
	call *(%rax)
	popq %rdi
	movq %rax,-8(%rbp)
	movq $99999,%rax
	pushq %rdi
	movq %rax,%rdi
	call put
	popq %rdi
	pushq %rdi
	movq %rdi,%rax
	movq (%rdi),%rax
	lea 24(%rax),%rax
	call *(%rax)
	popq %rdi
	movq %rax,-8(%rbp)
	pushq %rdi
	movq %rdi,%rax
	movq (%rdi),%rax
	lea 32(%rax),%rax
	call *(%rax)
	popq %rdi
	movq %rax,-8(%rbp)
	movq $0,%rax
	movq %rbp,%rsp
	popq %rbp
	ret 
BBS$Sort:
	pushq %rbp
	movq %rsp,%rbp
	subq $72,%rsp
	movq 16(%rdi),%rax
	pushq %rax
	movq $1,%rax
	popq %rdx
	negq %rax
	addq %rdx,%rax
	movq %rax,-16(%rbp)
	movq $0,%rax
	pushq %rax
	movq $1,%rax
	popq %rdx
	negq %rax
	addq %rdx,%rax
	movq %rax,-24(%rbp)
test1:
	movq -24(%rbp),%rax
	pushq %rax
	movq -16(%rbp),%rax
	popq %rdx
	cmpq %rax,%rdx
	jge done1
	movq $1,%rax
	movq %rax,-64(%rbp)
test2:
	movq -64(%rbp),%rax
	pushq %rax
	movq -16(%rbp),%rax
	pushq %rax
	movq $1,%rax
	popq %rdx
	addq %rdx,%rax
	popq %rdx
	cmpq %rax,%rdx
	jge done2
	movq -64(%rbp),%rax
	pushq %rax
	movq $1,%rax
	popq %rdx
	negq %rax
	addq %rdx,%rax
	movq %rax,-56(%rbp)
	movq 8(%rdi),%rax
	pushq %rax
	movq -56(%rbp),%rax
	popq %rdx
	movq 8(%rdx,%rax,8),%rax
	movq %rax,-32(%rbp)
	movq 8(%rdi),%rax
	pushq %rax
	movq -64(%rbp),%rax
	popq %rdx
	movq 8(%rdx,%rax,8),%rax
	movq %rax,-40(%rbp)
	movq -40(%rbp),%rax
	pushq %rax
	movq -32(%rbp),%rax
	popq %rdx
	cmpq %rax,%rdx
	jge else1
	movq -64(%rbp),%rax
	pushq %rax
	movq $1,%rax
	popq %rdx
	negq %rax
	addq %rdx,%rax
	movq %rax,-48(%rbp)
	movq 8(%rdi),%rax
	pushq %rax
	movq -48(%rbp),%rax
	popq %rdx
	movq 8(%rdx,%rax,8),%rax
	movq %rax,-72(%rbp)
	movq -48(%rbp),%rax
	pushq %rax
	movq 8(%rdi),%rax
	pushq %rax
	movq -64(%rbp),%rax
	popq %rdx
	movq 8(%rdx,%rax,8),%rax
	popq %rdx
	movq 8(%rdi),%rcx
	movq %rax,8(%rcx,%rdx,8)
	movq -64(%rbp),%rax
	pushq %rax
	movq -72(%rbp),%rax
	popq %rdx
	movq 8(%rdi),%rcx
	movq %rax,8(%rcx,%rdx,8)
	jmp done3
else1:
	movq $0,%rax
	movq %rax,-8(%rbp)
done3:
	movq -64(%rbp),%rax
	pushq %rax
	movq $1,%rax
	popq %rdx
	addq %rdx,%rax
	movq %rax,-64(%rbp)
	jmp test2
done2:
	movq -16(%rbp),%rax
	pushq %rax
	movq $1,%rax
	popq %rdx
	negq %rax
	addq %rdx,%rax
	movq %rax,-16(%rbp)
	jmp test1
done1:
	movq $0,%rax
	movq %rbp,%rsp
	popq %rbp
	ret 
BBS$Print:
	pushq %rbp
	movq %rsp,%rbp
	subq $8,%rsp
	movq $0,%rax
	movq %rax,-8(%rbp)
test3:
	movq -8(%rbp),%rax
	pushq %rax
	movq 16(%rdi),%rax
	popq %rdx
	cmpq %rax,%rdx
	jge done4
	movq 8(%rdi),%rax
	pushq %rax
	movq -8(%rbp),%rax
	popq %rdx
	movq 8(%rdx,%rax,8),%rax
	pushq %rdi
	movq %rax,%rdi
	call put
	popq %rdi
	movq -8(%rbp),%rax
	pushq %rax
	movq $1,%rax
	popq %rdx
	addq %rdx,%rax
	movq %rax,-8(%rbp)
	jmp test3
done4:
	movq $0,%rax
	movq %rbp,%rsp
	popq %rbp
	ret 
BBS$Init:
	pushq %rbp
	movq %rsp,%rbp
	movq 16(%rbp),%rax
	movq %rax,16(%rdi)
	movq 16(%rbp),%rax
	pushq %rax
	incq %rax
	shlq $3,%rax
	pushq %rdi
	movq %rax,%rdi
	call mjmalloc
	popq %rdi
	popq %rdx
	movq %rdx,0(%rax)
	movq $8,%rcx
	pushq %rax
test4:
	testq $0,%rdx
	je done5
	addq %rcx,%rax
	movq $0,(%rax)
	shlq $2,%rcx
	decq %rdx
	jmp test4
done5:
	popq %rax
	movq %rax,8(%rdi)
	movq $0,%rax
	pushq %rax
	movq $20,%rax
	popq %rdx
	movq 8(%rdi),%rcx
	movq %rax,8(%rcx,%rdx,8)
	movq $1,%rax
	pushq %rax
	movq $7,%rax
	popq %rdx
	movq 8(%rdi),%rcx
	movq %rax,8(%rcx,%rdx,8)
	movq $2,%rax
	pushq %rax
	movq $12,%rax
	popq %rdx
	movq 8(%rdi),%rcx
	movq %rax,8(%rcx,%rdx,8)
	movq $3,%rax
	pushq %rax
	movq $18,%rax
	popq %rdx
	movq 8(%rdi),%rcx
	movq %rax,8(%rcx,%rdx,8)
	movq $4,%rax
	pushq %rax
	movq $2,%rax
	popq %rdx
	movq 8(%rdi),%rcx
	movq %rax,8(%rcx,%rdx,8)
	movq $5,%rax
	pushq %rax
	movq $11,%rax
	popq %rdx
	movq 8(%rdi),%rcx
	movq %rax,8(%rcx,%rdx,8)
	movq $6,%rax
	pushq %rax
	movq $6,%rax
	popq %rdx
	movq 8(%rdi),%rcx
	movq %rax,8(%rcx,%rdx,8)
	movq $7,%rax
	pushq %rax
	movq $9,%rax
	popq %rdx
	movq 8(%rdi),%rcx
	movq %rax,8(%rcx,%rdx,8)
	movq $8,%rax
	pushq %rax
	movq $19,%rax
	popq %rdx
	movq 8(%rdi),%rcx
	movq %rax,8(%rcx,%rdx,8)
	movq $9,%rax
	pushq %rax
	movq $5,%rax
	popq %rdx
	movq 8(%rdi),%rcx
	movq %rax,8(%rcx,%rdx,8)
	movq $0,%rax
	movq %rbp,%rsp
	popq %rbp
	ret 
BBS$BBS:
	pushq %rbp
	movq %rsp,%rbp
	pushq %rdi
	movq $24,%rdi
	call mjmalloc
	popq %rdi
	leaq BBS$$,%rdx
	movq %rdx,(%rax)
	movq $0,8(%rax)
	movq $0,16(%rax)
	movq %rbp,%rsp
	popq %rbp
	ret 

	.data
BBS$$: .quad 0
	.quad BBS$BBS
	.quad BBS$Start
	.quad BBS$Sort
	.quad BBS$Print
	.quad BBS$Init


