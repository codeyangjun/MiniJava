
	.text
	.globl asm_main
asm_main:
	pushq %rbp
	movq %rsp,%rbp
	pushq %rdi
	call Example1$Example1
	movq %rax,%rdi
	movq $10,%rax
	pushq %rax
	movq (%rdi),%rax
	lea 16(%rax),%rax
	call *(%rax)
	popq %rdx
	popq %rdi
	pushq %rdi
	movq %rax,%rdi
	call put
	popq %rdi
	movq %rbp,%rsp
	popq %rbp
	ret 

	.data
RunClass$$: .quad 0

Example1$ComputeFac:
	pushq %rbp
	movq %rsp,%rbp
	subq $40,%rsp
	movq $1,%rax
	movq %rax,-16(%rbp)
	movq $2,%rax
	movq %rax,-24(%rbp)
	movq $3,%rax
	movq %rax,-32(%rbp)
	movq $4,%rax
	movq %rax,-40(%rbp)
	movq -16(%rbp),%rax
	pushq %rax
	movq -24(%rbp),%rax
	popq %rdx
	cmpq %rax,%rdx
	jge if1
	xor $1,%rax
	cmpq $0,%rax
	jne if1
	movq -32(%rbp),%rax
	pushq %rax
	movq -40(%rbp),%rax
	popq %rdx
	cmpq %rax,%rdx
	jge if1
	xor $1,%rax
	cmpq $0,%rax
	jne if1
	jmp else1
if1:
	movq $1,%rax
	movq %rax,-8(%rbp)
	jmp done1
else1:
	movq $0,%rax
	movq %rax,-8(%rbp)
done1:
	movq -8(%rbp),%rax
	movq %rbp,%rsp
	popq %rbp
	ret 
Example1$Example1:
	pushq %rbp
	movq %rsp,%rbp
	pushq %rdi
	movq $8,%rdi
	call mjmalloc
	popq %rdi
	leaq Example1$$,%rdx
	movq %rdx,(%rax)
	movq %rbp,%rsp
	popq %rbp
	ret 

	.data
Example1$$: .quad 0
	.quad Example1$Example1
	.quad Example1$ComputeFac


